#include<vector>
using namespace std;

class PriorityQueue {
    vector<int>pq;

   public:
    PriorityQueue() {
        // Implement the constructor here
    }

    /**************** Implement all the public functions here ***************/

    void insert(int element) {
        
        pq.push_back(element);
    
        int childIndex=pq.size()-1;
        
        while(childIndex>0)    //till it dont go upto root node
        {
            int parentIndex=(childIndex-1)/2;
            if(pq[parentIndex]<pq[childIndex])
            {
                int temp=pq[childIndex];
                pq[childIndex]=pq[parentIndex];
                pq[parentIndex]=temp;                          //swap to get them in the correct position
            }
            else
                break;
            
            childIndex=parentIndex;
        }
      
        
    }

    int getMax() {
          if(isEmpty())
          {
              return 0 ;
          }
        
        return pq[0];
    
    
    }

    int removeMax() {
        
        if(isEmpty())
            return 0;
        
        
        int ans=pq[0];
        pq[0]=pq[pq.size()-1];   //last element put in root node as parent 
        pq.pop_back();
        
        
        int parentIndex=0;
        int leftChildIndex=2*parentIndex+1;
        int rightChildIndex=2*parentIndex+2;
        
        while(leftChildIndex<pq.size())
        {
        int maxIndex=parentIndex;
        if(pq[maxIndex]<pq[leftChildIndex])
        {
            maxIndex=leftChildIndex;              //just getting the correct index 
        }
            
        //now comparing with the right child
            
           if(rightChildIndex<pq.size()&&pq[maxIndex]<pq[rightChildIndex])
           {
               maxIndex=rightChildIndex;
           }
            
            if(parentIndex==maxIndex)
                break;
            
        int temp=pq[parentIndex];
        pq[parentIndex]=pq[maxIndex];
        pq[maxIndex]=temp;
        
        
            leftChildIndex=2*parentIndex+1;
            rightChildIndex=2*parentIndex+2;
            
            
        }
        
      return ans;
        
    }

    int getSize() { 
        return pq.size();
    }

    bool isEmpty() {
        return (pq.size()==0);
    }
};
