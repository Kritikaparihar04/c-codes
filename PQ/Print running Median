#include<bits/stdc++.h>

void findMedian(int *arr, int n) 
    
{
    
priority_queue<int>maxHeap;
priority_queue<int,vector<int>,greater<int>> minHeap;
    
for(int i=0;i<n;i++)
{
    //we have to insert in the queue
    if(maxHeap.size()&&arr[i]>maxHeap.top())
    {
        minHeap.push(arr[i]);
    }
    else
    {
        maxHeap.push(arr[i]);
    }
    
    
    
    //CHECK BALANCING
    
    if(maxHeap.size()-minHeap.size()>1)//IT MEANS THE HEAPS ARE NOT BALANCE
    {
       if(maxHeap.size()>minHeap.size())
       {
           int temp=maxHeap.top();
           maxHeap.pop();
           minHeap.push(temp);
       }
       else
       {
            int temp=minHeap.top();
            minHeap.pop();
            maxHeap.push(temp);
       }
    }
    
    //CALCULATE MEDIAN
    
    int median=0;
    int totalSize=minHeap.size()+maxHeap.size();
    
    if(totalSize%2==0)
    {
        median=(minHeap.top()+maxHeap.top())/2;
    }
    else
    {
        if(minHeap.size()>maxHeap.size())
        {
            median=minHeap.top();
        }
        else
        {
            median=maxHeap.top();
        }
    }
    
    
    cout<<median<<" ";
    
    
    
}
    
