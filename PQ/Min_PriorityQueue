#include<iostream>
using namespace std;
#include<vector>

class PriorityQ
{
    vector<int>pq;
    public:
   PriorityQ()              //constructor
   {

   }

   bool isEmpty()
   {
     return pq.size()==0;
   }

   int getSize()
   {
             //if vector empty than simply return 
             if(isEmpty())
                 return;

             return pq.size();
   }

   int getMin()
   {
          return pq[0];               //visualise like tree but store as vector or array
   }


void insert(int element)
{
    pq.push_back(element);
    int childIndex=pq.size()-1;
    while(childIndex>0)  
    {          //means till the child node not reach the root
      
           int parentIndex=(childIndex-1)/2;
           if(pq[childIndex]<pq[parentIndex])
           {
               // if the child is less than its parent than swap
               int temp=pq[childIndex];
               pq[childIndex]=pq[parentIndex];
               pq[parentIndex]=temp;

           }

           else
           {              
              break;                       
      
            }
      childIndex=parentIndex;               //give child its parent position after swaping or not doesnt depend 

    }
    
    
    int removeMin() {
        
        if(isEmpty())
               return 0;        
        
        
        int ans=pq[0];   //storing the min element to return it
        pq[0]=pq[pq.size()-1];      //putting the last element to top
        pq.pop_back();   //removing the last element because it is alread inserted in the top that is the place of min element
        //now time to compare the elements
        
        int parentIndex=0;
         int LeftChildIndex=2*(parentIndex)+1;
        int RightChildIndex=2*(parentIndex)+2;
        while(LeftChildIndex<pq.size())
        {
           
        
          int minIndex=parentIndex;
            if(pq[minIndex]>pq[LeftChildIndex])
            {
                minIndex=LeftChildIndex;
            }
            if(RightChildIndex<pq.size()&&pq[RightChildIndex]<pq[minIndex])
            {
                minIndex=RightChildIndex;
            }
        if(minIndex==parentIndex)
        {
            break;
        }
            
            int temp=pq[minIndex];
            pq[minIndex]=pq[parentIndex];
            pq[parentIndex]=temp;
            
            parentIndex=minIndex;
            LeftChildIndex=2*parentIndex+1;
            RightChildIndex=2*parentIndex+2;
    }
        return ans;}

};
