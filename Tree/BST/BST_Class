class BST {
	BinaryTreeNode<int> *root;
public:
	BST()
	{
		root = NULL;
	}
	~BST()
	{
		delete root;
	}

private:

	BinaryTreeNode<int>* insert(BinaryTreeNode<int>*root, int data) {
		if (!root) {
			BinaryTreeNode<int> *newNode = new BinaryTreeNode<int>(data);
			return newNode;
		}

		if (root->data >= data) {
			root->left = insert(root->left, data);
		}
		else {
			root->right = insert(root->right, data);
		}

		return root;
	}

public:

	void insert(int data) {
		this->root = insert(root, data);
	}

private:

	BinaryTreeNode<int>* deleteData(BinaryTreeNode<int>* root, int data) {
		if (!root)
			return root;

		if (root->data > data) {
			deleteData(root->left, data);
		}
		if (root->data < data) {
			deleteData(root->right, data);
		}

		//case --- root-data == data
		else {
			if (!root->left && !root->right) {
				delete root;
				return NULL;
			}

			if (!root->left) {
				BinaryTreeNode<int>* newNode = root->right;
				root->right = NULL;
				delete root;
				return newNode;
			}
			if (!root->right) {
				BinaryTreeNode<int>* newNode = root->left;
				root->left = NULL;
				delete root;
				return newNode;
			}

			//when both left and right child present
			else {
				//find min ele from right subtree
				BinaryTreeNode<int> *minNode = root->right;
				while (minNode->left) {
					minNode = minNode->left;
				}
				int rightmin = minNode->data;
				root->data = rightmin;
				root->right = deleteData(root->right, rightmin);
				return root;
			}
		}
	}

public:

	void remove(int data) {
		this->root = deleteData(root, data);
	}

private:

	bool hasData(BinaryTreeNode<int> *root, int data) {
		if (!root)
			return 0;

		if (root->data == data)
			return 1;

		if (root->data > data)
			return hasData(root->left, data);

		return hasData(root->right, data);
	}

public:

	bool search(int data) {
		return hasData(root, data);
	}

private:
	void print(BinaryTreeNode<int> *root) {
		if (!root)
			return;

		cout << root->data << ":";

		if (root->left != NULL) {
			cout << "L:" << root->left->data<<",";
		}

		if (root->right != NULL) {
			cout << "R:" << root->right->data;
		}
		cout << endl;

		print(root->left);
		print(root->right);
	}
public:
	void print() {
		print(root);
	}
};
