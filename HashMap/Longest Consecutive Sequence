#include <vector>
using namespace std;
#include<unordered_map>

vector<int> longestConsecutiveIncreasingSequence(int *arr, int n){
	//Your Code goes here
    unordered_map<int,bool> map;
    int global_len = 0;
    int global_start;
    
    for(int i=0; i<n; i++)
        map[arr[i]] = true;
    
    unordered_map<int,bool>::iterator it = map.begin();
    
    while(it!=map.end()){
        
        if(it->second==true){
            int n = it->first;
            int len   = 1;
            int start = n;
            while(1){
                if(map.count(++n)){
                    len++;
                    map[n] = false;
                }
                else break;
            }
            n = it->first;
            while(1){
                if(map.count(--n)){
                    len++;
                    map[n] = false;
                    start = n;
                }
                else break;
            }
            
            if(len>global_len){
                global_len   = len;
                global_start = start;
            }
            
            if(len==global_len&&len!=1){
                int i=0;
                while(1){
                    if(arr[i]==start){
                        global_len   = len;
                		global_start = start;
                        break;
                    }
                    else if(arr[i]==global_start)
                        break;
                    i++;
                }
            }
            
            
        }
        it++;
    }
    
    vector<int> vec;
    
    if(global_len == 1){
        vec.push_back(arr[0]);
        return vec;
    }
    
    for(int i=global_start; i<global_start+global_len; i++){
        vec.push_back(i);
    }
    
    return vec;
    
}
