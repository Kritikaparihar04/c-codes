
Palindrome Pair
Send Feedback
Given 'n' number of words, you need to find if there exist any two words which can be joined to make a palindrome or any word, which itself is a palindrome.
The function should return either true or false. You don't have to print anything.
Input Format :
The first line of the test case contains an integer value denoting 'n'.

The following contains 'n' number of words each separated by a single space.
Output Format :
The first and only line of output contains true if the conditions described in the task are met and false otherwise.
Constraints:
0 <= n <= 10^5
Time Limit: 1 sec
Sample Input 1 :
4
abc def ghi cba
Sample Output 1 :
true


#include <string> 
#include <vector>
class TrieNode 
{
    public:
    char data;
    TrieNode **children; 
    bool isTerminal;
    int childCount; TrieNode(char data) {
        this->data = data;
        children = new TrieNode *[26];
        for (int i = 0; i < 26; i++)
        {
            children[i] = NULL;
        }
        isTerminal = false; 
        childCount = 0; 
    }
};
class Trie 
{
    TrieNode *root;
    public:
    int count;
    Trie()
    {
        this->count = 0;
        root = new TrieNode('\0'); } bool add(TrieNode *root, string word) 
    {
        // Base case 
        if (word.size() == 0) 
        {
            if (!root->isTerminal) 
            {
                root->isTerminal = true;
                return true; 
            }
            else 
            {
                return false; 
            }
        }
        // Small calculation
        int index = word[0] - 'a';
        TrieNode *child; 
        if (root->children[index] != NULL)
        { child = root->children[index]; 
        }
        else { 
            child = new TrieNode(word[0]); 
            root->children[index] = child;
            root->childCount++; 
        } 
        // Recursive call 
        return add(child, word.substr(1));
    }
    // For user 
    void add(string word)
    {
        if (add(root, word))
        {
            this->count++; 
        }
    }
    /*..................... Palindrome Pair................... */ 
    bool isPalindromePair(vector<string> words) 
    {
        for (int i = 0; i < words.size(); i++)
        {
            this->add(reverseWord(words[i]));
        }
        return isPalindromePair(this->root, words); 
    }
    string reverseWord(string word)
    {
        string reverse = "";
        for (int i = word.length() - 1; i >= 0; i--) 
        {
            reverse += word[i];
        }
        return reverse; 
    }
    bool isPalindromePair(TrieNode *root, vector<string> words)
    {
        if (words.size() == 0) 
        {
            return false; 
        }
        for (int i = 0; i < words.size(); i++) 
        {
            if (doesPairExistFor(root, words[i], 0)) 
            {
                return true; 
            }
        }
        return false;
    }
bool doesPairExistFor(TrieNode *root, string word, int startIndex)
{
    /* Since an empty string is always a palindrome, we return 'true' */ 
    if (word.length() == 0)
    {
        return true; 
    }
    if (startIndex == word.length())
    {
        if (root->isTerminal) 
        {
            /* * When there exists an exact match of the word we are * searching for in the Trie, irrespective of the trie * extends further in the same path. * */ 
            return true; 
        }
        /* * When trie extends further, there doesnt exist an exact * match of the string we are looking for. * However, it may happen that any of the the branch * extending from root may form a palindrome. * * */
        return checkRemainingBranchesInTrie(root, "");
    } 
    int charIndex = word[startIndex] - 'a';
    TrieNode *correspondingChild = root->children[charIndex]; 
    if (correspondingChild == NULL) 
    {
        /* * This means that, down the line in the characters that we are * looking for against the word in the trie, the character doesn't * exist in the trie. This character can be anywhere in the range [0 * - (word length-1)] * * */ 
        if (root->isTerminal) { return checkWordForPalindrome(word.substr(startIndex));
                              }
        return false;
    } 
    return doesPairExistFor(correspondingChild, word, (startIndex + 1)); 
}
    bool checkRemainingBranchesInTrie(TrieNode *root, string word)
    {
        /* * * This function recursively explores all the branches from the root * while keeping a track of the characters in the 'word' and checks * each word whenever the terminating condition is true. * * If the word is a palindrome, we return true and stops exploring the * other branches. If it is otherwise, we keep on checking the remaining * branches. * * Once all the branches are explored, and we don't find any branch or * word that makes itself a palindrome we return false at last. * */ 
        if (root->isTerminal) { if (checkWordForPalindrome(word)) { return true; } } 
        for (int i = 0; i < 26; i++) {
            TrieNode *childNode = root->children[i];
            if (childNode == NULL)
    {
            continue;
}
                                      
            string fwd = word + childNode->data;
                                      
            if (checkRemainingBranchesInTrie(childNode, fwd))
                                      
            {
                return true; 
            }
        }
        return false;
    }
    
    bool checkWordForPalindrome(string word) {
        int startIndex = 0;
        int endIndex = word.length() - 1;
        
    while (startIndex < endIndex)
    { 
        
  if (word[startIndex] != word[endInde   { 
                                                      return false; 
                                                  } startIndex += 1;
                                                  endIndex -= 1; } return true;
                                             } 
};

        
        
        
        
        #include <bits/stdc++.h>
using namespace std;
#include "solution.h"

int main() {
    Trie t;
    int n;
    cin >> n;
    vector<string> words(n);

    for (int i = 0; i < n; ++i) {
        cin >> words[i];
    }

    cout << (t.isPalindromePair(words) ? "true" : "false");
}
