

#include<bits/stdc++.h>

int knapsack(int *weights, int *values, int n, int maxWeight)
{
    
    //base case
    if(maxWeight==0||n==0)
        return 0;
    
    //we will check if the weight is greater than the maxWeight we will not save its corrosponding value
    if(weights[0]>maxWeight)
        return knapsack(weights+1,values+1,n-1,maxWeight);
    
    //recursive calls
    
    int x=knapsack(weights+1,values+1,n-1,maxWeight-weights[0])+values[0];     //we have saved the corrosponding value
    int y=knapsack(weights+1,values+1,n-1,maxWeight) ;//we didnt include the weight so maxWeight will be same
    
    return max(x,y);
    
    
}


#include <iostream>
using namespace std;
 

int main()
{
	int n;
	cin >> n;

	int *weights = new int[n];
	int *values = new int[n];

	for (int i = 0; i < n; i++)
	{
		cin >> weights[i];
	}

	for (int i = 0; i < n; i++)
	{
		cin >> values[i];
	}

	int maxWeight;
	cin >> maxWeight;

	cout << knapsack(weights, values, n, maxWeight) << endl;

	delete[] weights;
	delete[] values;
}
