
   bool palindrome(string str,int i,int j)
   {
       
       while(i<j)
       {
           if(str[i]!=str[j])
           return false;
           i++;
           j--;
       }
       return true;
   }

   
   int solve(string str,int i,int j,int dp[500][500])
   {
       //base condition
       if(i>=j)
       return 0;
      
       if(dp[i][j]!=-1)
          return dp[i][j];
          
       if(palindrome(str,i,j)==true)
       return 0;
       
      
          
       
       int mn=INT_MAX;
       for(int k=i;k<j;k++)
       {
           int temp=solve(str,i,k,dp)+solve(str,k+1,j,dp)+1;
           
           if(temp<mn)
           mn=temp;
           
         //  dp[i][j]=mn;
           
           
       }
       
       return dp[i][j]=mn;
   }
   
    int palindromicPartition(string str)
    {
      int dp[500][500];
      for(int i=0;i<500;i++)
      {
          for(int j=0;j<500;j++)
          {
              dp[i][j]=-1;
          }
      }
     return solve(str,0,str.length()-1,dp);   
    }
