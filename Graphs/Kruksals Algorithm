#include <iostream>
#include<bits/stdc++.h>
using namespace std;
class edge
{
    public:
    int source;
    int destination;
    int weight;
};

bool compare(edge e1,edge e2)
{
    return e1.weight<e2.weight;        //it will sort the array in increasing order
}

int findParent(int v,int *parent)
{
    if(parent[v]==v)
        return v;
    
    return findParent(parent[v],parent);
}

void kruksals(edge *input,int n,int E)
{
    //sort array in order of weight
sort(input,input+E,compare);      //we have used the compare function because in input array we have more 
                                  //than one parameter so compare function will help in sorting the array 
                                  //by keepimg the weight parameter in mimd    
    
    
  //make an output array
    edge*output=new edge[n-1];
    
                          
    //parent array
    
    int parent[n];
    for(int i=0;i<n;i++)
    {
        parent[i]=i;
    }
    
    
    
int i=0;
    int count=0;
    while(count!=n-1)
    {
        edge currentEdge=input[i];
   
    
    //check if we can add the current edge or not
    
    int sourceParent=findParent(currentEdge.source,parent);
    int destParent=findParent(currentEdge.destination,parent);
    
    if(sourceParent!=destParent)
    {
        output[count]=currentEdge;
        count++;
         parent[sourceParent]=destParent;
    }
i++;
    }

    
    //now print the MST
    
    for(int i=0;i<n-1;i++)
    {
        if(output[i].source<output[i].destination)
        {
            cout<<output[i].source<<" "<<output[i].destination<<" "<<output[i].weight<<endl;
         }
        else
{
    cout<<output[i].destination<<" "<<output[i].source<<" "<<output[i].weight<<endl;
}
    }

}

int main() {

    int v,E;
 
    cin>>v>>E;
     
    //make input array of type edge
    edge *input=new edge[E];
    for(int i=0;i<E;i++)
       { int s,d,w;
        cin>>s>>d>>w;
        
        input[i].source=s;
        input[i].destination=d;
        input[i].weight=w;
        
         }
    
    kruksals(input,v,E);
    
    
}
